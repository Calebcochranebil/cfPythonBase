Python for Web Developers 
Learning Journal










Objective
We find that the students who do particularly well in our courses are those who practice metacognition. Metacognition is the art of thinking about thinking; developing a deeper understanding of your own thought processes. With the help of this Learning Journal, you�ll broaden your metacognitive knowledge and skills by reflecting on what you learn in this course. 

Thanks to this Learning Journal, when you finish the course you�ll have a complete and detailed record of your learning journey and progress over time. We really recommend that you take the time to complete this Journal; students do better in CF courses and in the working world as a result!

Directions
First complete the pre-work section before you start your course. Then, once you�ve begun learning, take time after each Exercise to return to this Journal and respond to the prompts. 

There will be 3 to 5 prompts per Exercise, and we recommend spending about 10 to 15 minutes in total answering them. Don�t overthink it�just write whatever comes to mind! 

Also make sure that, once you�ve started filling this document in, you upload it as a deliverable on the platform. This is so that your mentor can also see your Journal and how you�re progressing over time. Don�t worry though�what you write here won�t affect how you�re graded for the Exercise tasks. The learning journal is mostly for you and your self-evaluation!

Pre-Work: Before You Start the Course

Reflection questions (to complete before your first mentor call)

1. What experiences have you had with coding and/or programming so far? What other experiences (programming-related or not) have you had that may help you as you progress through this course? Certainly, here's an expanded response:
I have a solid foundation in programming, particularly in JavaScript and Java. Over the course of my programming journey, I've successfully completed six diverse projects, spanning both backend and frontend development. These projects have honed my coding skills, problem-solving abilities, and project management expertise. They've allowed me to gain hands-on experience with various aspects of software development, including database management, user interface design, and algorithmic problem-solving.
In addition to my technical skills, I bring valuable non-programming experiences to the table. I have a background in marketing, which means I understand the importance of user-centric design and effective communication in software development. This perspective can contribute to creating user-friendly and marketable applications. Furthermore, my experience in vendor management has honed my ability to collaborate effectively with others, which is crucial in any team-based development environment.
Overall, my combined experiences in programming, marketing, and vendor management equip me with a diverse skill set and a holistic understanding of the software development process. I believe these experiences will be invaluable assets as I progress through this course and tackle new challenges in the field of programming.

2. What do you know about Python already? What do you want to know? I don�t know to much about python yet. I�m very interested in AI and I know Python is used a lot in AI. I know its easy to use and versatile.
I want to know how to use it for such things like AI. As well as how I could use it to make the apps I�ve already made better. 
3. What challenges do you think may come up while you take this course? What will help you face them? Think of specific spaces, people, and times of day of week that might be favorable to your facing challenges and growing. Plan for how to solve challenges that arise.  I think it is going to get pretty complex from what I have heard. My brother is a developer and has told me it can get difficult but is a very important language to understand. Motivation is hard for me as I work a full time job but I have a good support system so it will get done. Just might take some time. To help with complexity I will use my mentor and take time to read libraries.

Remember, you can always refer to Exercise 1.4 of the Orientation course if you�re not sure whom to reach out to for help and support.

Exercise 1.1: Getting Started with Python 
Learning Goals

? Summarize the uses and benefits of Python for web development
? Prepare your developer environment for programming with Python

Reflection Questions

1. In your own words, what is the difference between frontend and backend web development? If you were hired to work on backend programming for a web application, what kinds of operations would you be working on? 

Frontend Web Development:
Frontend developers focus on the user interface (UI) and user experience (UX) of a website. They design web pages, implement HTML/CSS/JavaScript, and ensure cross-browser compatibility and responsive design.

Backend Web Development:
Backend developers handle the server-side logic and infrastructure. They manage servers, databases, and write server-side code (often in Python) to process requests, handle data, and ensure security. They also create APIs for communication with the frontend.

2. Imagine you�re working as a full-stack developer in the near future. Your team is asking for your advice on whether to use JavaScript or Python for a project, and you think Python would be the better choice. How would you explain the similarities and differences between the two languages to your team? Drawing from what you learned in this Exercise, what reasons would you give to convince your team that Python is the better option? For full-stack development, I'd recommend Python over JavaScript to my team for these reasons:

Python Advantages:
- Python's clean syntax makes code more readable and maintainable.
- It's versatile, suitable for both frontend and backend development.
- Python excels in data handling and analysis, a plus for data-intensive projects.
- Extensive libraries and frameworks, like Django and Flask, facilitate backend development.
- Python seamlessly integrates with machine learning and AI, offering future scalability.

Overall, Python's readability, versatility, and data capabilities make it a strong choice for full-stack development, especially in projects with data and backend needs.

3. Now that you�ve had an introduction to Python, write down 3 goals you have for yourself and your learning during this Achievement. You can reflect on the following questions if it helps you. What do you want to learn about Python? What do you want to get out of this Achievement? Where or what do you see yourself working on after you complete this Achievement? 

Master Core Python Concepts: I aim to deepen my understanding of Python's core concepts, including data structures, control flow, functions, and object-oriented programming. Building a strong foundation in these areas is essential for becoming proficient in Python.

Explore Python's Applications: I want to explore Python's versatility by delving into various applications, such as web development with Django or Flask, data analysis with libraries like NumPy and Pandas, and potentially diving into machine learning and artificial intelligence. Understanding how Python is used in real-world scenarios will be valuable.

Develop More Problem-Solving Skills: I aim to enhance my problem-solving skills through Python programming. This includes solving coding challenges, tackling real-world projects, and learning how to design efficient and elegant solutions using Python.

After completing this Achievement, I envision myself as a more capable Python developer, ready to take on diverse projects ranging from web development to data analysis. I also hope to have a deeper appreciation for Python's role in the field of artificial intelligence and machine learning, opening up opportunities for specialization in these areas.

Exercise 1.2: Data Types in Python
Learning Goals

? Explain variables and data types in Python
? Summarize the use of objects in Python
? Create a data structure for your Recipe app

Reflection Questions

1. Imagine you�re having a conversation with a future colleague about whether to use the iPython Shell instead of Python�s default shell. What reasons would you give to explain the benefits of using the iPython Shell over the default one?    Certainly, here's a shorter response in sentence form:  Using the iPython Shell provides a more interactive and productive experience due to features like tab-completion, syntax highlighting, and rich media support. It offers powerful shortcuts with magic commands, built-in help, and script execution capabilities, making it a versatile choice for Python development. Additionally, it has a customizable interface and an active user community for support.

2. Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python recognizes, briefly define them, and indicate whether they are scalar or non-scalar. 


Data type
Definition
Scalar or Non-Scalar?
Boolean (bool)
Represent binary values, either True or False. They are often used for logical operations and conditional expressions.
Scalar. Booleans represent individual binary values.
Dictionary (dict)
Dictionaries are unordered collections of key-value pairs. They are used to store data in a structured way, allowing you to access values by their associated keys.
Non-scalar. Dictionaries store multiple key-value pairs, making them non-scalar data types.
String (str)
Strings are sequences of characters, such as text or symbols, enclosed in single or double quotes.
Non-scalar. Strings are collections of characters and can be of variable length.
Float (float)
Floats represent real numbers with a decimal point or in exponential form.
Scalar. Floats represent individual numeric values like integers, but with decimal precision.


3. A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down how you would respond. Lists in Python are mutable and allow you to modify their elements, and they're defined with square brackets []. Tuples, on the other hand, are immutable, meaning their elements cannot be changed once set, and they are defined with parentheses (). Use lists when you need to modify data, and tuples when you want data to remain constant.

4. In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a recipe. Now, imagine you�re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping through the flashcards. Think about the necessary data types and what would be the most suitable data structure for this language-learning app. Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, and where flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. A list of dictionaries is the most suitable data structure.
Advantages:
Structured Data: Dictionaries organize each flashcard efficiently with vocabulary words, definitions, and categories.
Sequential Order: Lists maintain flashcard order for studying.
Flexibility: Allows easy addition/removal of cards.
Iterability: Simple to display and manipulate flashcards.
Memory-Efficient: Dictionaries are memory-friendly for this purpose.
Considerations:
Immutability: You'll need to implement safeguards to prevent card changes.
Complexity: For future app expansion, consider more complex data structures beyond flashcards.
Exercise 1.3: Functions and Other Operations in Python
Learning Goals

? Implement conditional statements in Python to determine program flow
? Use loops to reduce time and effort in Python programming
? Write functions to organize Python code

Reflection Questions

1. In this Exercise, you learned how to use if-elif-else statements to run different tasks based on conditions that you define. Now practice that skill by writing a script for a simple travel app using an if-elif-else statement for the following situation: 

? The script should ask the user where they want to travel. 
? The user�s input should be checked for 3 different travel destinations that you define. 
? If the user�s input is one of those 3 destinations, the following statement should be printed: �Enjoy your stay in ______!�
? If the user�s input is something other than the defined destinations, the following statement should be printed: �Oops, that destination is not currently available.�
	
Write your script here. (Hint: remember what you learned about indents!)

# Define the three available travel destinations
destinations = ["Paris", "New York", "Tokyo"]

# Ask the user where they want to travel
user_input = input("Where do you want to travel? ")

# Check if the user's input is one of the defined destinations
if user_input in destinations:
    print("Enjoy your stay in", user_input + "!")
elif user_input == "":
    print("Please enter a destination.")
else:
    print("Oops, that destination is not currently available.")

2. Imagine you�re at a job interview for a Python developer role. The interviewer says �Explain logical operators in Python�. Draft how you would respond.
Python has three main logical operators:

and: Returns True if both operands are True.
or: Returns True if at least one operand is True.
not: Returns the opposite boolean value of its operand.

They are used to perform logical operations on boolean values or expressions and are essential for making decisions and controlling program flow based on conditions in Python.

3. What are functions in Python? When and why are they useful? Functions in Python are named blocks of code that perform specific tasks. They are valuable because they promote code reuse, enhance code organization, and allow for efficient modularization of complex programs. Functions make it easier to understand, maintain, and extend your code by encapsulating logic into manageable units with defined inputs and outputs.

4. In the section for Exercise 1 in this Learning Journal, you were asked in question 3 to set some goals for yourself while you complete this course.  In preparation for your next mentor call, make some notes on how you�ve progressed towards your goals so far. I�ve progressed towards my goal by setting a standard of 2 completed assignments a week and trying to remember a key point from my studies every day. This has helped me accomplish my goals.
Exercise 1.4: File Handling in Python
Learning Goals

? Use files to store and retrieve data in Python

Reflection Questions

1. Why is file storage important when you�re using Python? What would happen if you didn�t store local files? File storage in Python is essential for data persistence, input/output, and efficient data handling. Without it, you risk data loss, limited interactions, and reduced efficiency.

2. In this Exercise you learned about the pickling process with the pickle.dump() method. What are pickles? In which situations would you choose to use pickles and why? **Pickles** in Python are serialized representations of objects, created using `pickle.dump()`. They are useful for storing data, saving machine learning models, caching, maintaining program state, and interprocess communication. Pickles enable efficient handling and sharing of Python objects.

3. In Python, what function do you use to find out which directory you�re currently in? What if you wanted to change your current working directory? To find out the current working directory, you can use the os.getcwd().  To change the current working directory, you can use the os.chdir().

4. Imagine you�re working on a Python script and are worried there may be an error in a block of code. How would you approach the situation to prevent the entire script from terminating due to an error? To prevent a Python script from terminating due to an error in a specific code block, enclose that code in a `try` block and use an `except` block to handle any exceptions that may arise. This approach allows you to gracefully manage errors without halting the entire script's execution.

5. You�re now more than halfway through Achievement 1! Take a moment to reflect on your learning in the course so far. How is it going? What�s something you�re proud of so far? Is there something you�re struggling with? What do you need more practice with? Feel free to use these notes to guide your next mentor call. It's been a rewarding journey through Achievement 1 of the course. I'm particularly proud of creating a script that can run recipes and store them efficiently. However, I recognize that I need more practice to truly grasp the nuances and intricacies of coding. It's all about gaining that hands-on experience and honing my skills further. I'm looking forward to using these insights to guide my next mentor call and continue my learning journey.
Exercise 1.5: Object-Oriented Programming in Python
Learning Goals

? Apply object-oriented programming concepts to your Recipe app

Reflection Questions

1. In your own words, what is object-oriented programming? What are the benefits of OOP?

2. What are objects and classes in Python? Come up with a real-world example to illustrate how objects and classes work.

3. In your own words, write brief explanations of the following OOP concepts; 100 to 200 words per method is fine. 

Method
Description
Inheritance

Polymorphism

Operator Overloading


Exercise 1.6: Connecting to Databases in Python

Learning Goals

? Create a MySQL database for your Recipe app

Reflection Questions

1. What are databases and what are the advantages of using them?

2. List 3 data types that can be used in MySQL and describe them briefly:


Data type
Definition







3.  In what situations would SQLite be a better choice than MySQL?

4. Think back to what you learned in the Immersion course. What do you think about the differences between JavaScript and Python as programming languages?

5. Now that you�re nearly at the end of Achievement 1, consider what you know about Python so far. What would you say are the limitations of Python as a programming language?

Exercise 1.7: Finalizing Your Python Program
Learning Goals

? Interact with a database using an object-relational mapper
? Build your final command-line Recipe application


Reflection Questions

1. What is an Object Relational Mapper and what are the advantages of using one?

2. By this point, you�ve finished creating your Recipe app. How did it go? What�s something in the app that you did well with? If you were to start over, what�s something about your app that you would change or improve?

3. Imagine you�re at a job interview. You�re asked what experience you have creating an app using Python. Taking your work for this Achievement as an example, draft how you would respond to this question.
 
4. You�ve finished Achievement 1! Before moving on to Achievement 2, take a moment to reflect on your learning in the course so far: 
a. What went well during this Achievement? 
b. What�s something you�re proud of? 
c. What was the most challenging aspect of this Achievement? 
d. Did this Achievement meet your expectations? Did it give you the confidence to start working with your new Python skills?
e. What�s something you want to keep in mind to help you do your best in Achievement 2?

Well done�you�ve now completed the Learning Journal for Achievement 1. As you�ll have seen, a little metacognition can go a long way!

Pre-Work: Before You Start Achievement 2

In the final part of the learning journal for Achievement 1, you were asked if there�s anything�on reflection�that you�d keep in mind and do similarly or differently during Achievement 2. Think about these questions again:

? Was your study routine effective during Achievement 1? If not, what will you do differently during Achievement 2?
? Reflect on your learning and project work for Achievement 1. What were you most proud of? How will you repeat or build on this in Achievement 2?
? What difficulties did you encounter in the last Achievement? How did you deal with them? How could this experience prepare you for difficulties in Achievement 2?

Note down your answers and discuss them with your mentor in a call if you like.

Remember that can always refer to Exercise 1.4 of the Orientation course if you�re not sure whom to reach out to for help and support.


Exercise 2.1: Getting Started with Django

Learning Goals

? Explain MVT architecture and compare it with MVC
? Summarize Django�s benefits and drawbacks 
? Install and get started with Django

Reflection Questions

1. Suppose you�re a web developer in a company and need to decide if you�ll use vanilla (plain) Python for a project, or a framework like Django instead. What are the advantages and drawbacks of each?

2. In your own words, what is the most significant advantage of Model View Template (MVT) architecture over Model View Controller (MVC) architecture?

3. Now that you�ve had an introduction to the Django framework, write down three goals you have for yourself and your learning process during this Achievement. You can reflect on the following questions if it helps:
? What do you want to learn about Django? 
? What do you want to get out of this Achievement? 
? Where or what do you see yourself working on after you complete this Achievement?


Exercise 2.2: Django Project Set Up

Learning Goals

? Describe the basic structure of a Django project 
? Summarize the difference between projects and apps
? Create a Django project and run it locally
? Create a superuser for a Django web application

Reflection Questions

1. Suppose you�re in an interview. The interviewer gives you their company�s website as an example, asking you to convert the website and its different parts into Django terms. How would you proceed? For this question, you can think about your dream company and look at their website for reference. 
(Hint: In the Exercise, you saw the example of the CareerFoundry website in the Project and Apps section.)

2. In your own words, describe the steps you would take to deploy a basic Django application locally on your system. 

3. Do some research about the Django admin site and write down how you�d use it during your web application development.

Exercise 2.3: Django Models

Learning Goals

? Discuss Django models, the �M� part of Django�s MVT architecture
? Create apps and models representing different parts of your web application 
? Write and run automated tests

Reflection Questions

1. Do some research on Django models. In your own words, write down how Django models work and what their benefits are.

2. In your own words, explain why it is crucial to write test cases from the beginning of a project. You can take an example project to explain your answer.

Exercise 2.4: Django Views and Templates

Learning Goals

? Summarize the process of creating views, templates, and URLs 
? Explain how the �V� and �T� parts of MVT architecture work
? Create a frontend page for your web application

Reflection Questions

1. Do some research on Django views. In your own words, use an example to explain how Django views work.

2. Imagine you�re working on a Django web development project, and you anticipate that you�ll have to reuse lots of code in various parts of the project. In this scenario, will you use Django function-based views or class-based views, and why?

3.  Read Django�s documentation on the Django template language and make some notes on its basics.

Exercise 2.5: Django MVT Revisited

Learning Goals

? Add images to the model and display them on the frontend of your application
? Create complex views with access to the model
? Display records with views and templates


Reflection Questions

1. In your own words, explain Django static files and how Django handles them.

2. Look up the following two Django packages on Django�s official documentation and/or other trusted sources. Write a brief description of each.


Package
Description
ListView

DetailView




3. You�re now more than halfway through Achievement 2! Take a moment to reflect on your learning in the course so far. How is it going? What�s something you�re proud of so far? Is there something you�re struggling with? What do you need more practice with? You can use these notes to guide your next mentor call. 

Exercise 2.6: User Authentication in Django

Learning Goals

? Create authentication for your web application
? Use GET and POST methods 
? Password protect your web application�s views

Reflection Questions

1. In your own words, write down the importance of incorporating authentication into an application. You can take an example application to explain your answer. 

2. In your own words, explain the steps you should take to create a login for your Django web application. 

3. Look up the following three Django functions on Django�s official documentation and/or other trusted sources and write a brief description of each.


Function
Description
authenticate()

redirect()

include()







Exercise 2.7: Data Analysis and Visualization in Django

Learning Goals

? Work on elements of two-way communication like creating forms and buttons
? Implement search and visualization (reports/charts) features
? Use QuerySet API, DataFrames (with pandas), and plotting libraries (with matplotlib)

Reflection Questions

1. Consider your favorite website/application (you can also take CareerFoundry). Think about the various data that your favorite website/application collects. Write down how analyzing the collected data could help the website/application. 

2. Read the Django official documentation on QuerySet API. Note down the different ways in which you can evaluate a QuerySet.

3. In the Exercise, you converted your QuerySet to DataFrame. Now do some research on the advantages and disadvantages of QuerySet and DataFrame, and explain the ways in which DataFrame is better for data processing.


Exercise 2.8: Deploying a Django Project
Learning Goals

? Enhance user experience and look and feel of your web application using CSS and JS
? Deploy your Django web application on a web server 
? Curate project deliverables for your portfolio

Reflection Questions

1. Explain how you can use CSS and JavaScript in your Django web application.

2. In your own words, explain the steps you�d need to take to deploy your Django web application. 



3. (Optional) Connect with a few Django web developers through LinkedIn or any other network. Ask them for their tips on creating a portfolio to showcase Python programming and Django skills. Think about which tips could help you improve your portfolio.

4. You�ve now finished Achievement 2 and, with it, the whole course! Take a moment to reflect on your learning:
a. What went well during this Achievement? 
b. What�s something you�re proud of? 
c. What was the most challenging aspect of this Achievement? 
d. Did this Achievement meet your expectations? Did it give you the confidence to start working with your new Django skills?

Well done�you�ve now completed the Learning Journal for the whole course. 
